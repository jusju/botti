<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.1 on 2012-09-24 -->

<plugin>
  <name>Maven Surefire Plugin</name>
  <description>Surefire is a test framework project.</description>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
  <version>2.12.4</version>
  <goalPrefix>surefire</goalPrefix>
  <mojos>
    <mojo>
      <goal>help</goal>
      <description>Display help information on maven-surefire-plugin.
Call mvn surefire:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugin.surefire.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>test</goal>
      <description>Run tests using Surefire.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>test</phase>
      <implementation>org.apache.maven.plugin.surefire.SurefirePlugin</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not &apos;none&apos;).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.util.List</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:
-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be 
&lt;excludes&gt;
 &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;
(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified. Each exclude item may also contain a comma-separated sublist of items, which will be treated as multiple  &lt;exclude&gt; entries.
</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if the none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the forking mode. Can be &apos;never&apos;, &apos;once&apos;, &apos;always&apos; or &apos;perthread&apos;. &apos;none&apos; and &apos;pertest&apos; are also accepted for backwards compatibility. &apos;always&apos; forks for each test-class. &apos;perthread&apos; will create &apos;threadCount&apos; parallel forks.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be 
&lt;includes&gt;
 &lt;include&gt;**/IT*.java&lt;/include&gt;
 &lt;include&gt;**/*IT.java&lt;/include&gt;
 &lt;include&gt;**/*ITCase.java&lt;/include&gt;
&lt;/includes&gt;
Each include item may also contain a comma-separated sublist of items, which will be treated as multiple  &lt;include&gt; entries.
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) When you use the parallel attribute, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution. (JUnit 4.7 provider) Supports values &apos;classes&apos;/&apos;methods&apos;/&apos;both&apos; to run in separate threads, as controlled by threadCount.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount is per cpu core.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;.</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are &apos;alphabetical&apos;, &apos;reversealphabetical&apos;, &apos;random&apos;, &apos;hourly&apos; (alphabetical on even hours, reverse alphabetical on odd hours), &apos;failedfirst&apos;, &apos;balanced&apos; and &apos;filesystem&apos;. Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build. Failed first will run tests that failed on previous run first, as well as new tests for this run. Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests to make all tests complete at the same time, reducing the overall execution time. Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml, and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any config settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes/excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the includes/excludes parameters. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type &apos;-Dtest=MyTest&apos; to run a single test called &apos;foo/MyTest.java&apos;.
This parameter overrides the includes/excludes parameters, and the TestNG suiteXmlFiles parameter. Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, &apos;-Dtest=MyTest#myMethod&apos;. This is supported for junit 4.x and testNg.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(forkMode=perthread or TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter. (forkMode=perthread does not support/require the parallel parameter)</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.) Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s classloader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
      </parameters>
      <configuration>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <groups implementation="java.lang.String">${groups}</groups>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <runOrder implementation="java.lang.String" default-value="filesystem"/>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
      </configuration>
    </mojo>
  </mojos>
</plugin>